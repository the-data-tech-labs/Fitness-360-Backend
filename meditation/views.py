import os
import json
import google.generativeai as genai
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from django.conf import settings
from .serializers import MeditationExperienceSerializer, MeditationRecommendationSerializer
from dotenv import load_dotenv

load_dotenv()

class MeditationExperienceView(APIView):
    """
    API endpoint for generating personalized meditation recommendations
    based on user's current emotional/mental state
    """
    
    def post(self, request):
        serializer = MeditationExperienceSerializer(data=request.data)
        
        if not serializer.is_valid():
            return Response(
                {"error": "Invalid input", "details": serializer.errors}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        experience_text = serializer.validated_data['experience_text']
        
        # Configure Gemini API
        try:
            genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
            model = genai.GenerativeModel("gemini-1.5-flash")
        except Exception as e:
            return Response(
                {"error": "Failed to configure AI service", "details": str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
        
        # Create focused meditation prompt
        prompt = f"""
            You are an expert meditation teacher and mindfulness coach. Based on the user's current emotional/mental state, provide personalized meditation recommendations.

            User's current state: "{experience_text}"

            Please analyze their state and provide 2-3 specific meditation recommendations in the following JSON format:

            {{
                "recommendations": [
                    {{
                        "id": 1,
                        "meditation_type": "Breathing Meditation" (or "Mindfulness", "Body Scan", "Loving Kindness", "Walking Meditation", etc.),
                        "duration_minutes": 10,
                        "benefits": "Detailed explanation of how this meditation will help with their specific situation and emotional state",
                        "how_to_perform": "Step-by-step instructions for this meditation practice, written in a warm and encouraging tone. Include specific breathing patterns, postures, and mental techniques.",
                        "difficulty_level": "Beginner/Intermediate/Advanced",
                        "best_time": "Morning/Evening/Anytime/When feeling stressed"
                    }}
                ]
            }}

            Guidelines:
            - Choose meditation types that directly address their emotional/mental state
            - Provide practical, actionable instructions
            - Keep duration between 5-20 minutes based on their needs
            - Use encouraging and empathetic language
            - Include specific techniques (breathing patterns, visualizations, etc.)
            - Make instructions suitable for someone who might be new to meditation
            - Ensure the JSON is properly formatted and valid

            Return only the JSON response, no additional text or markdown formatting.
            """

        try:
            # Generate AI response
            response = model.generate_content(prompt)
            if not response.text:
                return Response(
                    {"error": "No recommendation generated by AI service"}, 
                    status=status.HTTP_500_INTERNAL_SERVER_ERROR
                )
            
            # Clean up the response text
            recommendation_text = response.text.strip()
            
        
            if recommendation_text.startswith('```json'):
                recommendation_text = recommendation_text[7:]
            if recommendation_text.startswith(r'```'):
                recommendation_text = recommendation_text[3:]
            if recommendation_text.endswith('```'):
                recommendation_text = recommendation_text[:-3]
            
            recommendation_text = recommendation_text.strip()
            
            # Parse JSON response
            try:
                parsed_response = json.loads(recommendation_text)
                
                # Validate response structure
                if 'recommendations' not in parsed_response:
                    raise ValueError("Invalid response structure: missing 'recommendations' key")
                
                recommendations = parsed_response['recommendations']
                
                if not isinstance(recommendations, list) or len(recommendations) == 0:
                    raise ValueError("No recommendations provided")
                
                # Validate and serialize each recommendation
                validated_recommendations = []
                for i, rec in enumerate(recommendations):
                    try:
                        # Add default values if missing
                        rec.setdefault('id', i + 1)
                        rec.setdefault('difficulty_level', 'Beginner')
                        rec.setdefault('best_time', 'Anytime')
                        
                        # Validate required fields
                        required_fields = ['meditation_type', 'duration_minutes', 'benefits', 'how_to_perform']
                        for field in required_fields:
                            if field not in rec or not rec[field]:
                                raise ValueError(f"Missing or empty required field: {field}")
                        
                        # Serialize to validate data types
                        rec_serializer = MeditationRecommendationSerializer(data=rec)
                        if rec_serializer.is_valid():
                            validated_recommendations.append(rec_serializer.validated_data)
                        else:
                            raise ValueError(f"Invalid recommendation data: {rec_serializer.errors}")
                            
                    except Exception as e:
                        # Skip invalid recommendations but continue with others
                        print(f"Skipping invalid recommendation {i}: {str(e)}")
                        continue
                
                if not validated_recommendations:
                    raise ValueError("No valid recommendations found")
                
                return Response(
                    {"recommendations": validated_recommendations}, 
                    status=status.HTTP_200_OK
                )
                
            except json.JSONDecodeError as e:
                return Response(
                    {
                        "error": "Invalid AI response format", 
                        "details": f"JSON parsing failed: {str(e)}",
                        "raw_response": recommendation_text[:500]  # First 500 chars for debugging
                    }, 
                    status=status.HTTP_500_INTERNAL_SERVER_ERROR
                )
            except ValueError as e:
                return Response(
                    {
                        "error": "Invalid recommendation data", 
                        "details": str(e)
                    }, 
                    status=status.HTTP_500_INTERNAL_SERVER_ERROR
                )
                
        except Exception as e:
            return Response(
                {"error": "AI generation failed", "details": str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    def get(self, request):
        """
        Get endpoint to provide API information and example usage
        """
        return Response({
            "message": "Meditation Experience API",
            "description": "POST your emotional/mental state to get personalized meditation recommendations",
            "example": {
                "experience_text": "I'm feeling stressed about work and having trouble sleeping"
            },
            "response_format": {
                "recommendations": [
                    {
                        "id": 1,
                        "meditation_type": "Breathing Meditation",
                        "duration_minutes": 10,
                        "benefits": "Helps calm the nervous system and reduce stress...",
                        "how_to_perform": "Find a quiet space, sit comfortably...",
                        "difficulty_level": "Beginner",
                        "best_time": "Evening"
                    }
                ]
            }
        })
